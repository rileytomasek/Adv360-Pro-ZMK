
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

#define HYPER    LC(LA(LGUI))
#define HYP(key) (LC(LA(LG(key)))

#define LEFT_KEYS 14 15 16 17 18 19 29 30 31 32 33 47 48 49 50 51 // left-hand keys
#define RIGHT_KEYS 22 23 24 25 26 40 41 42 43 60 61 62 63 64 65 66 67 68 69 // right-hand keys

/ {
  behaviors {
    #include "macros.dtsi"

    lh_pht: left_hand_positional_hold_tap {
        // See: https://zmk.dev/docs/behaviors/hold-tap#positional-hold-tap-and-hold-trigger-key-positions
        compatible = "zmk,behavior-hold-tap";
        label = "LEFT_POSITIONAL_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-unless-interrupted";
        tapping-term-ms = <150>;                        // <---[[produces tap if held longer than tapping-term-ms]]
        quick-tap-ms = <200>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <RIGHT_KEYS>;    // <---[[right-hand keys]]

        // See: https://github.com/zmkfirmware/zmk/pull/1423
        // compatible = "zmk,behavior-hold-tap";
        // label = "HOMEROW_MODS_LEFT";
        // #binding-cells = <2>;
        // flavor = "balanced";
        // tapping-term-ms = <200>;
        // hold-trigger-key-positions = <RIGHT_KEYS>;
        // hold-trigger-on-release;
        // bindings = <&kp>, <&kp>;
    };

    rh_pht: right_hand_positional_hold_tap {
        // See: https://zmk.dev/docs/behaviors/hold-tap#positional-hold-tap-and-hold-trigger-key-positions
        compatible = "zmk,behavior-hold-tap";
        label = "RIGHT_POSITIONAL_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-unless-interrupted";
        tapping-term-ms = <150>;                        // <---[[produces tap if held longer than tapping-term-ms]]
        quick-tap-ms = <200>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <LEFT_KEYS>;    // <---[[left-hand keys]]
    };
  };

    keymap {
        compatible = "zmk,keymap";
 
         default_layer {
            bindings = <
&kp EQUAL       &kp N1          &kp N2          &kp N3          &kp N4          &kp N5 &tog 1                                                                           &mo 3    &kp N6 &kp N7          &kp N8          &kp N9          &kp N0            &kp MINUS
&kp TAB         &kp Q           &kp W           &kp E           &kp R           &kp T  &kp LBRC                                                                         &kp RBRC &kp Y  &kp U           &kp I           &kp O           &kp P             &kp BSLH
&mt LCTRL ESC   &kp A           &kp S           &lh_pht LGUI D  &lh_pht LCTL F  &kp G  &kp LPAR          &kp LGUI   &kp LALT             &kp LGUI  &kp RCTRL            &kp RPAR &kp H  &rh_pht RCTL J  &kp K           &kp L           &kp SEMI          &kp SQT
&kp LSHFT       &kp Z           &kp X           &kp C           &kp V           &kp B           &none    &none      &kp HOME &none &none &kp PG_UP &none     &none               &kp N  &kp M           &kp COMMA       &kp DOT         &kp FSLH          &kp RSHFT
&mo 2           &kp GRAVE       &kp CAPS        &kp LEFT        &kp RIGHT                       &kp BSPC &kp HYPER  &kp END              &kp PG_DN &kp ENTER &lt 2 SPACE                &kp DOWN        &kp UP          &kp LBKT        &kp RBKT          &mo 2
            >;
        };

        layer_keypad {
            bindings = <
 &kp EQUAL     &kp N1    &kp N2    &kp N3     &kp N4    &kp N5                  &trans             &mo 3     &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY     &kp MINUS
   &kp TAB      &kp Q     &kp W     &kp E      &kp R     &kp T                   &none             &none      &kp Y   &kp KP_N7     &kp KP_N8      &kp KP_N9     &kp KP_MINUS      &kp BSLH
   &kp ESC      &kp A     &kp S     &kp D      &kp F     &kp G            &macro_hyper  &kp LEFT_COMMAND   &kp LALT                                 &kp LGUI        &kp RCTRL  &macro_hyper     &kp H  &kp KP_N4  &kp KP_N5  &kp KP_N6   &kp KP_PLUS    &kp SQT
 &kp LSHFT      &kp Z     &kp X     &kp C      &kp V     &kp B                   &none             &none   &kp HOME       &none         &none      &kp PG_UP            &none         &none     &kp N  &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_ENTER  &kp RSHFT
     &mo 2  &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT  &kp BSPC               &kp LCTRL           &kp END  &kp PG_DN   &kp ENTER     &kp KP_N0         &kp UP         &kp DOWN    &kp KP_DOT  &kp RBKT      &mo 2
            >;
        };

        layer_fn {
            bindings = <
 &kp F1  &kp F2     &kp F3  &kp F4  &kp F5  &kp F6            &tog 1   &mo 3  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
 &trans  &kp AT     &kp PLUS  &kp LBRC  &kp RBRC  &kp EXCL     &none   &none  &trans  &trans  &trans   &trans   &trans   &trans
 &trans  &kp DOLLAR &kp EQUAL &kp LPAR  &kp RPAR  &kp GRAVE    &none  &trans  &trans                   &trans   &trans    &none  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &kp HASH   &kp MINUS &kp LBKT  &kp RBKT  &kp UNDER    &none   &none  &trans   &none   &none   &trans    &none    &none  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans     &trans    &trans    &trans    &trans      &trans  &trans  &trans  &trans  &trans   &trans   &trans   &trans  &trans  &trans
            >;
        };

        layer_mod {
            bindings = <
  &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3     &bt BT_SEL 4                             &none       &trans  &bt BT_SEL 0  &bt BT_SEL 1     &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                   &none
  &none         &none         &none         &none         &none            &none                       &bootloader  &bootloader         &none         &none            &none         &none         &none                   &none
  &none         &none         &none         &none         &none            &none            &rgb_ug RGB_MEFS_CMD 5   &bt BT_CLR         &none                                   &bt BT_CLR    &bt BT_CLR  &rgb_ug RGB_MEFS_CMD 5   &none   &none   &none   &none   &none   &none
  &none         &none         &none         &none         &none            &none                             &none        &none         &none         &none            &none         &none         &none                   &none   &none   &none   &none   &none   &none   &none
  &none         &none         &none    &bl BL_INC    &bl BL_DEC  &rgb_ug RGB_TOG                        &bl BL_TOG        &none         &none    &bl BL_TOG  &rgb_ug RGB_TOG    &bl BL_INC    &bl BL_DEC                   &none   &none   &none
            >;
        };

    };
};
